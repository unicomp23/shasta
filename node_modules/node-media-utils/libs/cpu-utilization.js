/// @copyright Â© 2016 Airtime Media.  All rights reserved.

var os = require('os');

CpuUtil.MinIntervalMs = 500;  ///< returns the cached value if getOverall() / getByCore() is called within this interval.

/**
 * <code>
 * Usage:
 * var cu = new CpuUtil();
 * setInterval(function(){
 *  console.log('CPU Util%=' + cu.getOverall() * 100);
 * }, 2000);
 * </code>
 * @param minIntervalMs (optional): minimum query interval that refetches a new value. default = CpuUtil.MinIntervalMs;
f*/
function CpuUtil(minIntervalMs) {
  if (!minIntervalMs) minIntervalMs = CpuUtil.MinIntervalMs;  // default
  this.minIntervalMs_ = minIntervalMs;
  this.capturedAt_ = 0;
  this.cached_ = [];
  var cores = os.cpus();
  for (var i = 0; i < cores.length; ++i) {
    this.cached_.push(0);
  }
  this.updateCache_();
}

/// @return overall utilization (between 0 and 1.0) since last call of getOverall or getByCore
CpuUtil.prototype.getOverall = function() {
  if (this.minIntervalMs_ < (Date.now() - this.capturedAt_)) {
    this.updateCache_();
  }
  return this.calculateOverall_();
}

/// @return an array of utilization per core (between 0 and 1.0 each) since last call of getOverall or getByCore
CpuUtil.prototype.getByCore = function() {
  if (this.minIntervalMs < (Date.now() - this.capturedAt_)) {
    this.updateCache_();
  }
  return this.cached_;
}
var getTotalMSecInTimes = function(objTimes) {
  return objTimes.user + objTimes.nice + objTimes.sys + objTimes.idle + objTimes.irq;
}

CpuUtil.prototype.updateCache_ = function() {
  var now = Date.now();
  var cores = os.cpus();
  for (var i = 0; i < cores.length; ++i) {
    var last = this.lastTicks_ ? this.lastTicks_[i] : null;
    var lastTotal = last ? getTotalMSecInTimes(last.times) : 0;
    var lastIdle = last ? last.times.idle : 0;

    var cur = cores[i];
    var curTotal = getTotalMSecInTimes(cur.times);

    var diffTotal = curTotal - lastTotal;
    var diffIdle = cur.times.idle - lastIdle;
    var util = 0 < diffTotal ? (diffTotal - diffIdle) / diffTotal : 0;
    this.cached_[i] = util;
  }
  this.capturedAt_ = now;
  this.lastTicks_ = cores;
}

CpuUtil.prototype.calculateOverall_ = function() {
  var total = 0;
  for (var i = 0; i < this.cached_.length; ++i) {
    total += this.cached_[i];
  }
  return total / this.cached_.length;
}

// Exports
module.exports.CpuUtil = CpuUtil;
