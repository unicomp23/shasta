/// @copyright Â© 2022 Airtime Media.  All rights reserved.

const http = require('http');
const Logger = require('./logging').Logger;

// We set values in Node JS http ServerResponse object. Using distinctive property names to avoid name collision.
const TRANSACTION_ID = 'respTimeLoggerTransactionId';
const TRANSACTION_START = 'respTimeLoggerTransactionStart';

// We mark http::Request to indicate this hook has been attached, to avoid hook it again
const HTTP_RESPONSE_TIMER_LOGGER_HOOKED = 'HttpResponseTimeLogger-hooked';

/**
 * Specifies HttpResponseTimeLogger threshold behavior.
 */
class ThresholdSpec {
  /**
   * @param {number} responseTimeMsec
   * @param {string} overThresholdLogLevel This log level is used if the response time was above responseTimeMsec
   */
  constructor(responseTimeMsec, overThresholdLogLevel) {
    this.responseTimeMsec = responseTimeMsec;
    this.overThresholdLogLevel = overThresholdLogLevel;
    this.checkThresholdSpec_();
  }

  /** @private */
  checkThresholdSpec_() {
    if('number' !== typeof this.responseTimeMsec || this.responseTimeMsec <= 0) {
      throw new Error('ThresholdSpec.responseTimeMsec needs to be positive number' +
                      ` but given ${this.responseTimeMsec}`);
    }
    if ('string' !== typeof this.overThresholdLogLevel) {
      throw new Error(`ThresholdSpec.overThresholdLogLevel is missing or invalid: ${this.overThresholdLogLevel}`);
    }
  }
}

class HttpResponseTimeLogger {
  /**
   * Constructor sets up automatic response time logging.
   * http::Server and http::ServerResponse
   * @param {string} logLevel See logging.js
   * @param {ThresholdSpec=} thresholdSpec OPTIONAL
   * @param {Logger=} logger OPTIONAL. Replacement logger.
   */
  constructor(logLevel, thresholdSpec, logger) {
    if (!logLevel || 'string' !== typeof logLevel) throw new Error('need correct logLevel');
    if (!(thresholdSpec instanceof ThresholdSpec)) {
      logger = thresholdSpec;
      thresholdSpec = undefined;
    }

    if (!logger) logger = new Logger('HttpResponseTimeLogger');

    this.checkValidLogLevel_(logger, logLevel);
    if (thresholdSpec) this.checkValidLogLevel_(logger, thresholdSpec.overThresholdLogLevel);

    // double hooking check
    if (http.Server.prototype[HTTP_RESPONSE_TIMER_LOGGER_HOOKED]) {
      logger.warn('HttpResponseTimeLogger is instantiated again. bailing out');
      return;
    }
    // mark it is hooked.
    http.Server.prototype[HTTP_RESPONSE_TIMER_LOGGER_HOOKED] = true;

    // Following two hooks are at the same place as what NewRelic does to measure transaction stats

    let transactionId = 0;  // to make it easier to correlate request and response in logs
    const self = this;

    // request hook
    this.origEmit = http.Server.prototype.emit;
    http.Server.prototype.emit = function(name, req, res) {
      if ('request' === name) {
        // res is Node JS http ServerResponse object. using distinctive property names to avoid name collision
        res[TRANSACTION_ID] = ++transactionId;
        res[TRANSACTION_START] = Date.now();
        // ServerResponse.req is only available after Node 15.7. Sets it if not there,
        if (undefined === res.req) res.req = req;
        const logMsg = `REQUEST: ${req.method} ${req.url} id=${res[TRANSACTION_ID]} start=${res[TRANSACTION_START]}`;
        logger[logLevel](logMsg);
      }
      self.origEmit.apply(this, arguments);
    };

    // response hook
    this.origWriteHead = http.ServerResponse.prototype.writeHead;
    http.ServerResponse.prototype.writeHead = function(statusCode, msg) {
      const respTime = Date.now() - this[TRANSACTION_START];
      const logMsg = `WRITEHEAD: ${statusCode} ${this.req.method} ${this.req.url}` +
                      ` id=${this[TRANSACTION_ID]} start=${this[TRANSACTION_START]} ${respTime}msec`;
      self.origWriteHead.apply(this, arguments);
      if (thresholdSpec && thresholdSpec.responseTimeMsec < respTime) {
        logger[thresholdSpec.overThresholdLogLevel](logMsg);
      } else {
        logger[logLevel](logMsg);
      }
    };
  }

  /**
   * @private Unit test helper
   * Do not use if newrelic is loaded. This can invalidate newrelic functions.
   * This call cannot unhook from already loaded http module.
   * */
  unhook() {
    http.Server.prototype.emit = this.origEmit;
    http.ServerResponse.prototype.writeHead = this.origWriteHead;
    http.Server.prototype[HTTP_RESPONSE_TIMER_LOGGER_HOOKED] = false;
  }

  /** @internal */
  checkValidLogLevel_(logger, logLevel) {
    if (undefined === logger[logLevel]) {
      throw new Error(`Given log level ${logLevel} is invalid`);
    }
  }
}

module.exports.ThresholdSpec = ThresholdSpec;
module.exports.HttpResponseTimeLogger = HttpResponseTimeLogger;
