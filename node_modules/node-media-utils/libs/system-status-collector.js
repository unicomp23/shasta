/**
 * @file collects system status.
 * @copyright Â© 2016 Airtime Media.  All rights reserved.
 */

 var logger = require('./logging.js').logger;
 var CpuUtil = require('./cpu-utilization.js').CpuUtil;
 var AverageCpuUtil = require('./average-cpu-utilization.js').AverageCpuUtil;
 var availableMemory = require('./available-memory.js').availableMemory;
 var os = require('os');

 /**
  * Constructs the status collector.
  * @param cpuAvgWindowSecs {number} or {array} moving window length(s) of CPU utilization average(s)
  */
 function SystemStatusCollector(cpuAvgWindowSecs) {
   if ('number' === typeof(cpuAvgWindowSecs)) {
     if (cpuAvgWindowSecs <= 0) {
       throw new Error("cpuAvgWindowSecs must be positive number but given " + cpuAvgWindowSecs);
     }
   } else {
     if (Array.isArray(cpuAvgWindowSecs)) {
       for (var i = 0; i < cpuAvgWindowSecs.length; ++i) {
         if ('number' !== typeof(cpuAvgWindowSecs[i]) || cpuAvgWindowSecs[i] <= 0) {
           throw new Error("cpuAvgWindowSecs must be positive number but given " + cpuAvgWindowSecs);
         }
       }
     } else {
       throw new Error("cpuAvgWindowSecs must be a number or an array of numbers but given " + cpuAvgWindowSecs);
     }
   }

   this.cpuUtil_ = new CpuUtil();
   var avgSampleIntervalSec = cpuAvgWindowSecs.sort()[0] / 10;  // ensure 10 samples for the minimum window
   this.cpuUtilAvg_ = new AverageCpuUtil(cpuAvgWindowSecs, avgSampleIntervalSec);
 }
 exports.SystemStatusCollector = SystemStatusCollector;

 /// @param callback : function(err, resultObj)
 SystemStatusCollector.prototype.collect = function(callback) {
   const self = this;
   availableMemory(function(err, availMem) {
     if (err) {
       return callback(err);
     }
     const loadAvg = os.loadavg();
     const numCores = os.cpus().length;
     const resultObj = {
       numCpus: numCores,
       cpuUtilization: self.cpuUtil_.getOverall(),
       cpuUtilAvg: self.makeCpuUtilAvg_(),
       cpuLoadAvg: {
         min1: loadAvg[0] / numCores, min5: loadAvg[1] / numCores, min15: loadAvg[2] / numCores
       },
       memTotal: os.totalmem(),
       memFree: availMem,
       cpuUtilizationPerCore: self.cpuUtil_.getByCore()
     }

     callback(null, resultObj);
   });
 }

 SystemStatusCollector.prototype.makeCpuUtilAvg_ = function() {
   var avgs = this.cpuUtilAvg_.getAverages();
   var result = {};
   for (var sec in avgs) {
     result['sec' + sec] = avgs[sec];
   }
   return result;
 }
