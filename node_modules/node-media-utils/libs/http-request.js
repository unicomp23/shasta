/// @copyright Â© 2022 Airtime Media.  All rights reserved.

const http = require('http');
const https = require('https');
const axios = require('axios');
const Logger = require('../libs/logging').Logger;
const logger = new Logger('HttpRequest');

/**
 * A class that sends HTTP(s) requests using http.Agent that can use keep-alive connection.
 * @param {String} host
 * @param {Number} port
 * @param {String} protocol. 'http' or 'https'
 * @param {Object} agentOptions. @see http.Agent constructor.
 *        ex. { keepAlive: true, keepAliveMsecs: 5000, maxSockets: 5, timeout: 1000 }
 * @param {Object} httpOptions. Current implementation uses Axios. @see https://github.com/axios/axios#request-config
 */
function HttpRequest(host, port, protocol, agentOptions, httpOptions) {
  if (!host) throw new Error('Need host');
  if (!port) throw new Error('Need port');
  if (!protocol) throw new Error('Need protocol');
  if (!agentOptions) agentOptions = {};
  this.host = host;
  this.port = port;
  this.protocol = protocol;
  logger.info(`HttpRequest for ${host}:${port}`);

  if ('https' === protocol) {
    this.agent = new https.Agent(agentOptions);
  } else if ('http' === protocol) {
    this.agent = new http.Agent(agentOptions);
  } else {
    throw new Error('protocol has to be either http or https');
  }
  this.keepAlive = agentOptions.keepAlive;

  this.httpOptions = httpOptions;
}
module.exports.HttpRequest = HttpRequest;

/**
 * Sends a request
 * @param {String} method, such as 'GET'
 * @param {String} path. such as '/shop/hat'
 * @param {Object or String} reqBody Sent only if method is either POST, PUT or PATCH
 * @param {Object} opts. Current implementation uses Axios. @see https://github.com/axios/axios#request-config
 *                 If the same item is given, it overrides @a httpOptions given in the constructor.
 * @returns Promise for { statusCode: <code>, statusMessage: <msg>, headers: { ... }, body: <resonse body> }
 *          response body is either Object or String based on content-type given by the server.
 */
HttpRequest.prototype.send = async function(method, path, reqBody, opts) {
  if (this.keepAlive && opts && opts.headers && opts.headers.connection) {
    logger.info(`HttpRequest.send got headers.connection: ${headers.connection}.` +
                ' Ignoring it because agentOption given to constructor specified keepAlive');
    delete opts.headers.connection;
  }
  const options = Object.assign({
    httpAgent: this.agent
  }, this.httpOptions, opts);

  // Axios has different function signature for 'put', 'post', 'patch' from others.
  // Others take request body as options.data.
  let resp;
  method = method.toLowerCase();
  switch (method) {
  case 'put': case 'post': case 'patch':
    resp = await axios[method](`${this.protocol}://${this.host}:${this.port}${path}`, reqBody, options);
    break;
  default:
    if (reqBody) options.data = reqBody;
    resp = await axios[method](`${this.protocol}://${this.host}:${this.port}${path}`, options);
    break;
  }
  return { statusCode: resp.status, statusMessage: resp.statusText, headers: resp.headers, body: resp.data };
}
