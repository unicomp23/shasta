/// @copyright Â© 2017 Airtime Media.  All rights reserved.

var os = require('os');
var CpuUtil = require('./cpu-utilization').CpuUtil;

/**
 * @param windowSecs {number} or {array of numbers} : moving average windows in sec (can be fraction)
 * @param sampleSec {number} : sampling frequency in sec (can be fraction)
 */
function AverageCpuUtil(windowSecs, sampleSec) {
  if ('number' === typeof windowSecs) windowSecs = [ windowSecs ];
  if (!Array.isArray(windowSecs)) throw new Error('Invalid moving average window specification: ' + windowSecs);
  if ('number' !== typeof sampleSec) throw new Error('Invalid sampling frequency specification: ' + sampleSec);
  this.baseTime_ = Date.now();
  this.utilization_values_ = [];
  this.sampleSec_ = sampleSec;
  this.initSums_(windowSecs);
  this.cpuUtil_ = new CpuUtil(sampleSec * 1000 - 1);  // to ensure it fetches value everytime I call it.
  var self = this;
  this.intervalTimer_ = setInterval(function(){
    self.update_();
  }, sampleSec * 1000);
}

// Exports
module.exports.AverageCpuUtil = AverageCpuUtil;

/// Stops the measurement. Mainly for clean exit of unit test.
AverageCpuUtil.prototype.stop = function() {
  clearInterval(this.intervalTimer_);
};

/// @return {object} : { <windowSec> : <average utilization> }
AverageCpuUtil.prototype.getAverages = function() {
  var result = {};
  var totalNumVals = this.utilization_values_.length;
  for (var i = 0; i < this.sums_.length; ++i) {
    var sum = this.sums_[i];
    result[sum.window] = (0 < totalNumVals) ? sum.sum / Math.min(totalNumVals, sum.numValsInWindow) : 0;
  }
  return result;
}


AverageCpuUtil.prototype.initSums_ = function(windowSecs) {
  this.sums_ = [];
  var max = 0;
  for (var i = 0; i < windowSecs.length; ++i) {
    var windowSec = windowSecs[i];
    if (windowSec < this.sampleSec_) {
      throw new Error('Window ' + windowSec + ' cannot be smaller than sample freq. ' + this.sampleSec_);
    }
    this.sums_[i] = { window: windowSec, numValsInWindow: Math.ceil(windowSec / this.sampleSec_), sum: 0 };
    if (max < windowSec) max = windowSec;
  }
  this.maxNumVals_ = Math.ceil(max / this.sampleSec_);
}

AverageCpuUtil.prototype.update_ = function() {
  var now = Date.now();
  var cpu = this.cpuUtil_.getOverall();
  this.utilization_values_.push(cpu);
  var totalNumVals = this.utilization_values_.length;
  for (var i = 0; i < this.sums_.length; ++i) {
    var sum = this.sums_[i];
    if (sum.numValsInWindow < totalNumVals) sum.sum -= this.utilization_values_[totalNumVals - sum.numValsInWindow - 1];
    sum.sum += cpu;
  }
  if (this.maxNumVals_ < totalNumVals) {
    this.utilization_values_.shift();
  }
}
