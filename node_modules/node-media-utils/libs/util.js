// Copyright Airtime Media, 2015

// replaces NodeJS's util.inspect with default depth = 10 (original default = 2)
// this is to let third party code inspects deeper.
var utl = require('util');

var inspect = function(obj, opt) {
  if (!opt) opt = {};
  if (!opt.hasOwnProperty('depth')) opt.depth = 10;
  return utl.inspect_original(obj, opt);
}

if (!utl.hasOwnProperty('inspect_original')) {
  utl.inspect_original = utl.inspect;
  utl.inspect = inspect;
}

exports.inspect = inspect;

/// @return @a host if it is IP (V4 or V6) address. Otherwise null
var isIpAddr = function(host) {
  return isIpV4Addr(host) || isIpV6Addr(host);
}
exports.isIpAddr = isIpAddr;

/// @return @a host if it is IPV4 address. Otherwise null
var isIpV4Addr = function(host) {
  if ('string' !== typeof host) return null;
  var h = host.match(/^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/);
  if (!h) return null;
  if ('string' !== typeof h) h = h[0];

  var ns = h.split('.');
  if (4 !== ns.length) return null;
  for (var i = 0; i < 4; ++i) {
    var n = parseInt(ns[i]);
    if (isNaN(n)) return null;
    if (255 < n) return null;
  }
  return host;
}
exports.isIpV4Addr = isIpV4Addr;

/// @return @a host if it is IPV6 address. Otherwise null
var isIpV6Addr = function(host) {
  if ('string' !== typeof host) return null;
  var h = host;
  var head = h.charAt(0);
  var tail = h.charAt(h.length - 1);
  if (('[' === head && ']' !== tail) ||
      ('[' !== head && ']' === tail)) return null;
  if ('[' === head) h = h.slice(1, h.length - 2);

  h = h.match(/^[0-9a-fA-F:]*$/);
  if (!h) return null;
  if ('string' !== typeof h) h = h[0];

  if (h.indexOf(':') < 0) return null;
  var doubleColons = h.match(/::/g);
  if (doubleColons && 1 < doubleColons.length) return null;
  var ns = h.split(':');
  if (8 < ns.length) return null;
  for (var i = 0; i < ns.length; ++i) {
    var n = ns[i];
    var s = (0 === n.length) ? 0 : parseInt(n, 16);
    if (isNaN(s)) return null;
    if (0xFFFF < s) return null;
  }
  return host;
}
exports.isIpV6Addr = isIpV6Addr;

var removeIPv6Bracket = function(ip) {
  return ip.replace(/\[/g, '').replace(/\]/g, '');
}
exports.removeIPv6Bracket = removeIPv6Bracket;

var isValidData = function(data) {
  return data !== null && data !== undefined;
}
exports.isValidData = isValidData;

/// hex-dumps the contents of the @a buffer. @return an array of strings, each entry has a output line.
var hexDump = function(buffer) {
  var output = [];
  if (0 === buffer.length) return output;
  var lines = Math.floor(buffer.length / 16);
  for (var i = 0; i < lines; ++i) {
    var base = 16 * i;
    output.push(composeHexDumpLine(buffer, base, 16));
  }
  var base = 16 * lines;
  var rest = buffer.length % 16;
  output.push(composeHexDumpLine(buffer, base, rest));
  return output;
}

exports.hexDump = hexDump;

var composeHexDumpLine = function(buffer, basePos, numInLine) {
  var addr = ('        ' + basePos.toString(16)).substr(-8) + ': ';
  var hexs = [];
  hexs[8] = '';
  hexs[17] = '|';
  var chars = [];
  for (var i = 0; i < numInLine ; ++i) {
    var raw = buffer[basePos + i];
    var hexIdx = i < 8 ? i : i + 1;
    hexs[hexIdx] = ('0' + raw.toString(16)).substr(-2);
    chars[i] = (raw < 0x20 || 0x7e < raw) ? '.' : String.fromCharCode(raw);
  }
  if (numInLine < 16) {
    for (var i = numInLine; i < 16; ++i) {
    var hexIdx = i < 8 ? i : i + 1;
      hexs[hexIdx] = '  ';
      chars[i] = ' ';
    }
  }
  return addr + hexs.join(' ') + chars.join('');
}
