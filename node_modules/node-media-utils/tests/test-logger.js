/// @copyright Â© 2015 Airtime Media.  All rights reserved.

var chai = require('chai');
var expect = chai.expect;
var assert = chai.assert;
chai.config.includeStack = true;

var ConsoleCapture = require('../libs/console-capture');

var Config = require('../libs/config_base').Config;
var util = require('../libs/util');
var Logger = require('../libs/logging').Logger;
var logger = require('../libs/logging').logger;
var Mock = require('./mock').Mock;
var Syslog = require('modern-syslog');
var fs = require('fs');

describe('Logger', function() {
  it('shoud set up temporary log', function() {
    // disable log before testing
    Logger.initConsoleLogger({level: 'none'});

    // test
    Logger.enableTemporaryLog();
    var logMsg = 'TEST LOG MESSAGE';
    // temporarily redirect the console log
    var out = ConsoleCapture.capture(function() {
      logger.info(logMsg);
    });
    expect(out[0]).to.include(logMsg);
  });

  describe('SysLog', function() {
    var origLogger;
    var origSyslog;
    var loggingJsCopy = __dirname + '/node-media-utils_test-logger_logging.js';
    beforeEach(function() {
      origLogger = Logger;
      origSyslog = Logger.sysLogClass_;
      fs.writeFileSync(loggingJsCopy, fs.readFileSync(__dirname + '/../libs/logging.js'));
    });
    afterEach(function() {
      Logger = origLogger;
      Logger.sysLogClass_ = origSyslog;
      if (fs.existsSync(loggingJsCopy)) {
        fs.unlinkSync(loggingJsCopy);
      }
    });

    it('should share syslog on/off setting among all loggers', function() {
      // TEC-853

      // suppress console log
      Logger.initConsoleLogger({ level: 'none' });

      // replace syslog with our mock
      var mockSyslog = new Mock(assert);
      Logger.sysLogClass_ = mockSyslog;

      var syslogFile = '/tmp/abc.log';  // just a name, we are not writing into it.

      // mock prep
      mockSyslog.expects('init').thenDo(function(fileName) {
        expect(fileName).to.equal(syslogFile);
        // there are other args, but we don't care at this time
      });
      mockSyslog.expects('log').thenDo(function(level, msg) {
        expect(level).to.equal(Syslog.LOG_INFO);
        expect(msg).to.contain('initialized SysLog');
      });

      Logger.initSysLogLogger({ name: syslogFile, level: 'debug' });

      // using precreated instance
      // mock prep
      mockSyslog.expects('log').thenDo(function(level, msg) {
        expect(level).to.equal(Syslog.LOG_WARNING);
        expect(msg).to.contain('syslog from precreated logger');
      });
      logger.warn('syslog from precreated logger');

      // using custom instance
      // mock prep
      mockSyslog.expects('log').thenDo(function(level, msg) {
        expect(level).to.equal(Syslog.LOG_WARNING);
        expect(msg).to.contain('syslog from custom logger');
      });
      let lg = new Logger('my tag 123');
      lg.warn('syslog from custom logger');

      // emulating different version of 'this module (i.e. node-media-utils)'
      // mock prep
      mockSyslog.expects('log').thenDo(function(level, msg) {
        expect(level).to.equal(Syslog.LOG_WARNING);
        expect(msg).to.contain('syslog via another module logger');
      });
      var AnotherLogger = require(loggingJsCopy).Logger;
      // replace syslog with our mock
      AnotherLogger.sysLogClass_ = mockSyslog;
      let anotherLogger = new AnotherLogger('another');
      anotherLogger.warn('syslog via another module logger');

      mockSyslog.verify();
    });
  });

  describe('Error position', function() {
    let originalError;

    beforeEach(function() {
      // disable log before testing
      Logger.initConsoleLogger({level: 'none'});
      Logger.enableTemporaryLog();

      originalError = Error;
    });

    afterEach(function() {
      Error = originalError;
    });

    it('should handle log detailed traces at error level', function() {
      const priorTraceDirectory = '/opt/git/mendocino/mendocino/node_modules/node-media-utils/libs/';
      const priorTracePosition = 'logging.js:210';

      const directory = '/should/i/start/doing/';
      const position = 'cosplay.js:168';

      const followingTraceDirectory = '/maybe/i/should/be/';
      const followingTracePosition = 'tuxedo-mask.js:61';

      class MockError {
        constructor() {
          this.stack = `Error
            at Logger.<computed> [as info] (${priorTraceDirectory}${priorTracePosition}:17)
            at AppConfig.Config.processConfigFile_ (${directory}${position}:12)
            at AppConfig.Config (${followingTraceDirectory}${followingTracePosition}:8)`;
        }
      }

      Error = MockError;

      let testLog = 'Test Error Level Log';

      let out = ConsoleCapture.capture(function() {
        logger.error(testLog);
      });

      expect(out[0]).to.include(`[${position}]`);
      expect(out[0]).to.include(testLog);
      expect(out[0]).to.include(directory);
      expect(out[0]).to.include(followingTraceDirectory);
      expect(out[0]).to.include(followingTracePosition);
      expect(out[0].indexOf(position)).to.be.below(out[0].indexOf(followingTracePosition))

      expect(out[0]).to.not.include(priorTraceDirectory);
      expect(out[0]).to.not.include(priorTracePosition);
    });

    it('should handle non-express error positions', function() {
      const priorTraceDirectory = '/opt/git/mendocino/mendocino/node_modules/node-media-utils/libs/';
      const priorTracePosition = 'logging.js:210';

      const directory = '/should/i/start/doing/';
      const position = 'cosplay.js:168';

      const followingTraceDirectory = '/maybe/i/should/be/';
      const followingTracePosition = 'tuxedo-mask.js:61';

      class MockNonExpressError {
        constructor() {
          this.stack = `Error
            at Logger.<computed> [as info] (${priorTraceDirectory}${priorTracePosition}:17)
            at AppConfig.Config.processConfigFile_ (${directory}${position}:12)
            at AppConfig.Config (${followingTraceDirectory}${followingTracePosition}:8)`;
        }
      }

      Error = MockNonExpressError;

      let testLog = 'Test Non Express Error';

      let out = ConsoleCapture.capture(function() {
        logger.info(testLog);
      });

      expect(out[0]).to.include(`[${position}]`);
      expect(out[0]).to.include(testLog);

      expect(out[0]).to.not.include(directory);
      expect(out[0]).to.not.include(priorTraceDirectory);
      expect(out[0]).to.not.include(priorTracePosition);
      expect(out[0]).to.not.include(followingTraceDirectory);
      expect(out[0]).to.not.include(followingTracePosition);
    });

    it('should handle express error positions', function() {
      const priorTraceDirectory = '/opt/git/mendocino/mendocino/node_modules/node-media-utils/libs/';
      const priorTracePosition = 'logging.js:210';

      // This is an Express style error trace filepath
      const directory = 'file:///should/i/start/doing/';
      const position = 'cosplay.js:168';

      const followingTraceDirectory = '/maybe/i/should/be/';
      const followingTracePosition = 'tuxedo-mask.js:61';

      class MockExpressError {
        constructor() {
          this.stack = `Error
            at Logger.<computed> [as info] (${priorTraceDirectory}${priorTracePosition}:17)
            at Server.<anonymous> (${directory}${position}:14)
            at Object.onceWrapper (${followingTraceDirectory}${followingTracePosition}:28)`;
        }
      }

      Error = MockExpressError;

      let testLog = 'Test Express Error';

      let out = ConsoleCapture.capture(function() {
        logger.info(testLog);
      });

      expect(out[0]).to.include(`[${position}]`);
      expect(out[0]).to.include(testLog);

      expect(out[0]).to.not.include(directory);
      expect(out[0]).to.not.include(priorTraceDirectory);
      expect(out[0]).to.not.include(priorTracePosition);
      expect(out[0]).to.not.include(followingTraceDirectory);
      expect(out[0]).to.not.include(followingTracePosition);
    });
  });
});
