/// @copyright Â© 2022 Airtime Media.  All rights reserved.

const Logger = require('../libs/logging').Logger;
const http = require('http');

const logger = new Logger('LocalServer');

/**
 * A class that is used in unit tests and acts as an HTTP server.
 */
 function LocalTestServer() {
  this.requests = [];       // will be set by the time when a response is sent
  this.requestBodies = [];  // ditto
};
exports.LocalTestServer = LocalTestServer;

/**
 * Runs the server.
 * @param {Array of Object} results.
 *        An array of responses { statusCode:<code>, body:<body>, headers:{...}, delayMsec:<msec> } for incoming requests.
 *        If body is an object, result content-type is application/json. Otherwise text/html.
 *        delayMsec is optional and defaults to 0ms (immediate response).
 * @returns promise for [ http.Server, port ]
 */
LocalTestServer.prototype.run = async function(results) {
  if (!Array.isArray(results)) results = [ results ];

  this.storeResults_(results);

  const self = this;
  const server = http.createServer(async function(req, res) {
    self.requests.push(req);

    let reqBody = '';
    for await (const chunk of req) {
      reqBody += chunk;
    }
    self.requestBodies.push(reqBody);

    const result = self.results.shift();
    if (!result) result = { status: 200, headers: {'content-type': 'text/html'}, body: null };
    res.statusCode = result.status;
    res.statusMessage = 'status=' + res.statusCode;
    for (const header of Object.keys(result.headers)) {
      res.setHeader(header, result.headers[header]);
    }
    if (result.body) {
      res.write(result.body);
    }

    if (result.delayMsec) {
      setTimeout(() => res.end(), result.delayMsec);
      return;
    }
    res.end();
  });

  server.on('connection', (socket) => {
    logger.info('on CONNECTION. port=' + socket.localPort);
    self.connected = true;
  });
  server.on('close', () => {
    logger.info('on CLOSE.');
    self.closed = true;
  });

  const port = await new Promise((resolve, reject) => {
    server.on('listening', function() {
      resolve(server.address().port);
    });
    server.listen(0);
  });

  return [ server, port ];
}

LocalTestServer.prototype.storeResults_ = function(results) {
  this.results = [];
  for (let i = 0; i < results.length; ++i) {
    const resultBody = results[i].body;
    const resultHeaders = results[i].headers;
    const result = this.categorizeResultBody_(resultBody, resultHeaders);
    result.status = results[i].statusCode || 200;
    result.delayMsec = results[i].delayMsec || 0;
    this.results.push(result);
  }
}

LocalTestServer.prototype.categorizeResultBody_ = function(resultBody, resultHeaders) {
  if (null === resultBody || undefined === resultBody) {
    return { headers: Object.assign({'content-type': 'text/html'}, resultHeaders), body: null };
  }
  let bodyStr = resultBody;
  let resultContentType;
  if ('object' === typeof bodyStr) {
    bodyStr = JSON.stringify(bodyStr);
    resultContentType = 'application/json';
  } else {
    resultContentType = 'text/html';
  }
  return { headers: Object.assign({'content-type': resultContentType}, resultHeaders), body: bodyStr };
}
