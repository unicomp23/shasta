/// @copyright Â© 2015 Airtime Media.  All rights reserved.

var chai = require('chai');
var expect = chai.expect;
var assert = chai.assert;
chai.config.includeStack = true;

var fs = require('fs');
var ConsoleCapture = require('../libs/console-capture');

var Config = require('../libs/config_base').Config;
var util = require('../libs/util');
var Logger = require('../libs/logging').Logger;
var nodeutil = require('util');

var findInArray = function(ary, key) {
  var found = false;
  ary.forEach(function(v) {
    if (0 <= v.indexOf(key)) found = true;
  });
  if (!found) {
    console.error('Element ' + key + ' not found in:\n', ary.toString());
  }
  return found;
}

var createDir = function(path) {
  if (fs.existsSync(path)) return;
  fs.mkdirSync(path);
}

var workDir = './test-work';
var origArgv;

describe('ConfigBase', function() {

  beforeEach(function(done) {
    // suppress console log
    Logger.initConsoleLogger({level: 'none'});
    origArgv = process.argv.slice(0);
    done();
  });

  afterEach(function(done) {
    process.argv = origArgv;
    done();
  });

  // fake subclass
  var MyConfigDefaultLogFile = 'mylog.txt';
  var MyConfigItemMandatoryKey1 = 'key1';
  var MyConfigItemOptionalKey2 = 'key2';
  var MyConfigItemWithDefaultKey3 = 'key3';
  var MyConfigItemDefaultVaule3 = 'default-value3';
  var MyConfig = function() {
    Config.call(this, MyConfigDefaultLogFile, [
      MyConfigItemMandatoryKey1,
      MyConfigItemOptionalKey2,
      MyConfigItemWithDefaultKey3,
      Config.Param_Config
    ]);
  }
  nodeutil.inherits(MyConfig, Config);
  // override
  MyConfig.prototype.initArgv = function(argvConfig, defaultConfig) {
    // set app specific config keys and description
    this.argvConfig[MyConfigItemMandatoryKey1] = {
      describe: 'Mandatory item brah brah',
      alias: 'm'
    };
    this.argvConfig[MyConfigItemOptionalKey2] = {
      describe: 'Optional item brah brah',
      alias: 'o'
    };
    this.argvConfig[MyConfigItemWithDefaultKey3] = {
      describe: 'Some item brah brah. default=' + MyConfigItemDefaultVaule3,
      alias: 'd'
    };
    // set default value
    defaultConfig[MyConfigItemWithDefaultKey3] = MyConfigItemDefaultVaule3;
  }
  // override
  MyConfig.prototype.validateConfigParam = function(key) {
    // key 1 - mandatory
    if (MyConfigItemMandatoryKey1 === key) {
      var val = this.getSingle(key);
      // if (some checks against val) {
      //  throw new Error('Invalid ' + key + ': ' + val);
      // }
    }
    // key 2 - optional
    if (MyConfigItemOptionalKey2 === key) {
      var val = this.getSingle(key);
      if (typeof val === 'undefined') return;  // ok if not given
      // if (some checks against val) {
      //  throw new Error('Invalid ' + key + ': ' + val);
      // }
    }
    // key 3 check if needed
  }
  // optional override - runs after validateConfigParam
  MyConfig.prototype.postValidateConfigParams = function() {
    // do some checking if needed
  }

  // tests
  it('should_throw_if_single_item_is_given_twice', function(done) {
    // duplicate
    process.argv.push('--' + Config.Param_LogLevel);
    process.argv.push('debug');
    process.argv.push('--' + Config.Param_LogLevel);
    process.argv.push('info');

    // mandatory entries
    process.argv.push('--' + MyConfigItemMandatoryKey1);
    process.argv.push('foo');

    try {
      new MyConfig();
      assert.ok(false, 'should throw');
    } catch(err) {
      assert.ok(err instanceof Error, err);
      assert.ok(0 <= err.toString().indexOf('Duplicate config: ' + Config.Param_LogLevel), err);
    }
    done();
  });

  const baseDefault = {
    [Config.Param_LogLevel] : Config.DefaultLogLevel,
    [Config.Param_LogFile] : MyConfigDefaultLogFile,
    [Config.Param_LogFileMaxKB] : Config.DefaultLogFileMaxKB,
    [Config.Param_LogMaxFiles] : Config.DefaultLogMaxFiles,
    [Config.Param_UseSysLog] : Config.DefaultUseSysLog,
    [Config.Param_UseConsoleLog] : Config.DefaultUseConsoleLog,
    [Config.Param_HelpLogLevel] : Config.DefaultHelpLogLevel
  };
  const appDefault = {
    [MyConfigItemWithDefaultKey3] : MyConfigItemDefaultVaule3
  };
  const defaults = Object.assign(baseDefault, appDefault);

  let verifyConfItem = function(conf, key, expectedVal) {
    if (Array.isArray(expectedVal)) {
      assert.deepEqual(expectedVal, conf.get(key), key);
    } else {
      assert.equal(expectedVal, conf.get(key), key);
    }
  }

  let verifyConf = function(givenItems) {
    var conf = new MyConfig();

    Object.keys(givenItems).forEach(key => {
      let val = givenItems[key];
      verifyConfItem(conf, key, val);
    });

    Object.keys(defaults).forEach(key => {
      if (Object.keys(givenItems).indexOf(key) < 0) {
        let val = defaults[key];
        verifyConfItem(conf, key, val);
      }
    });
  };

  it('should_take_all_given_params_from_command_line', function(done) {
    // application specific
    var value1 = '1111';
    process.argv.push('--' + MyConfigItemMandatoryKey1);
    process.argv.push(value1);
    var value2 = '2222';
    process.argv.push('--' + MyConfigItemOptionalKey2);
    process.argv.push(value2);
    var value3 = '3333';
    process.argv.push('--' + MyConfigItemWithDefaultKey3);
    process.argv.push(value3);
    // base iterms
    var level = 'warn'
    process.argv.push('--' + Config.Param_LogLevel);
    process.argv.push(level);
    var file = 'logfile';
    process.argv.push('--' + Config.Param_LogFile);
    process.argv.push(file);
    var maxKB = 234;
    process.argv.push('--' + Config.Param_LogFileMaxKB);
    process.argv.push(maxKB.toString());
    var maxFiles = 345;
    process.argv.push('--' + Config.Param_LogMaxFiles);
    process.argv.push(maxFiles.toString());
    var syslog = 'false';
    process.argv.push('--' + Config.Param_UseSysLog);
    process.argv.push(syslog.toString());
    var conlog = 'true';
    process.argv.push('--' + Config.Param_UseConsoleLog);
    process.argv.push(conlog.toString());

    verifyConf({
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : value2,
      [MyConfigItemWithDefaultKey3] : value3,
      [Config.Param_LogLevel] : level,
      [Config.Param_LogFile] : file,
      [Config.Param_LogFileMaxKB] : maxKB,
      [Config.Param_LogMaxFiles] : maxFiles,
      [Config.Param_UseSysLog] : syslog,
      [Config.Param_UseConsoleLog] : conlog
    });
    done();
  });

  it('should_use_default_for_command_line', function(done) {
    // only mandatory items
    var value1 = '1111';
    process.argv.push('--' + MyConfigItemMandatoryKey1);
    process.argv.push(value1);

    verifyConf({
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : undefined
    });
    done();
  });

  it('should_show_help', function(done) {
    process.argv.push('--' + Config.CommandParam_Help);

    // temporarily redirect the console log
    var out = ConsoleCapture.capture(function() {
      new MyConfig();
    });

    // note: the first two spaces and the tailing comma are not to find the key in the description.
    assert.ok(findInArray(out, '--' + MyConfigItemMandatoryKey1 + ' '), MyConfigItemMandatoryKey1);
    assert.ok(findInArray(out, '--' + MyConfigItemOptionalKey2 + ' '), MyConfigItemOptionalKey2);
    assert.ok(findInArray(out, '--' + MyConfigItemWithDefaultKey3 + ' '), MyConfigItemWithDefaultKey3);
    // base items
    assert.ok(findInArray(out, '--' + Config.Param_Config + ' '), Config.Param_Config);
    // assert.ok(findInArray(out, '--' + Config.CommandParam_Help), Config.CommandParam_Help);  // Only available on command line
    assert.ok(findInArray(out, '--' + Config.Param_LogLevel + ' '), Config.Param_LogLevel);
    assert.ok(findInArray(out, '--' + Config.Param_LogFile + ' '), Config.Param_LogFile);
    assert.ok(findInArray(out, '--' + Config.Param_LogFileMaxKB + ' '), Config.Param_LogFileMaxKB);
    assert.ok(findInArray(out, '--' + Config.Param_LogMaxFiles + ' '), Config.Param_LogMaxFiles);
    assert.ok(findInArray(out, '--' + Config.Param_UseSysLog + ' '), Config.Param_UseSysLog);
    assert.ok(findInArray(out, '--' + Config.Param_UseConsoleLog + ' '), Config.Param_UseConsoleLog);
    assert.ok(findInArray(out, '--' + Config.Param_HelpLogLevel + ' '), Config.Param_HelpLogLevel);

    done();
  });

  it('should handle when test config has all', function(done) {
    var value1 = 111;
    var value2 = 'bbb';
    var value3 = true;
    var level = 'warn';
    var helpLevel = 'error';
    var logFile = 'mylog.file';
    var logMaxKB = 234;
    var logMaxFiles = 34;
    var useSysLog = true;
    var useConLog = false;

    var confData = '{\n' +
    ' "' + MyConfigItemMandatoryKey1 + '": "' + value1 + '",\n' +  // quoted as a string
    ' "' + MyConfigItemOptionalKey2 + '": "' + value2 + '",\n' +
    ' "' + MyConfigItemWithDefaultKey3 + '": "' + value3 + '",\n' +  // quoted as a string
    ' "' + Config.Param_LogLevel + '": "' + level + '",\n' +
    ' "' + Config.Param_LogFile + '": "' + logFile + '",\n' +
    ' "' + Config.Param_LogFileMaxKB + '": "' + logMaxKB + '",\n' +
    ' "' + Config.Param_LogMaxFiles + '": "' + logMaxFiles + '",\n' +
    ' "' + Config.Param_UseSysLog + '": "' + useSysLog + '",\n' +
    ' "' + Config.Param_UseConsoleLog + '": "' + useConLog + '",\n' +
    ' "' + Config.Param_HelpLogLevel + '": "' + helpLevel + '"\n' +
    '}\n';
    createDir(workDir);
    var confFile = workDir + '/test-config-reads-all.json';
    fs.writeFileSync(confFile, confData);

    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile);

    verifyConf({
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : value2,
      [MyConfigItemWithDefaultKey3] : value3.toString(),
      [Config.Param_LogLevel] : level,
      [Config.Param_LogFile] : logFile,
      [Config.Param_LogFileMaxKB] : logMaxKB,
      [Config.Param_LogMaxFiles] : logMaxFiles,
      [Config.Param_UseSysLog] : useSysLog.toString(),
      [Config.Param_UseConsoleLog] : useConLog.toString(),
      [Config.Param_HelpLogLevel] : helpLevel
    });
    done();
  });

  it('should_convert_number_and_boolean_in_config_file', function(done) {
    var value1 = 111;
    var value2 = 'bbb';
    var value3 = true;
    var level = 'warn';
    var helpLevel = 'error';
    var logFile = 'mylog.file';
    var logMaxKB = 234;
    var logMaxFiles = 34;
    var useSysLog = true;
    var useConLog = false;

    var confData = '{\n' +
    ' "' + MyConfigItemMandatoryKey1 + '": ' + value1 + ',\n' +  // not quoted - number
    ' "' + MyConfigItemOptionalKey2 + '": "' + value2 + '",\n' +
    ' "' + MyConfigItemWithDefaultKey3 + '": ' + value3 + ',\n' +  // not quoted - boolean
    ' "' + Config.Param_LogLevel + '": "' + level + '",\n' +
    ' "' + Config.Param_LogFile + '": "' + logFile + '",\n' +
    ' "' + Config.Param_LogFileMaxKB + '": ' + logMaxKB + ',\n' +  // not quoted - number
    ' "' + Config.Param_LogMaxFiles + '": ' + logMaxFiles + ',\n' +  // not quoted - number
    ' "' + Config.Param_UseSysLog + '": ' + useSysLog + ',\n' +  // not quoted - boolean
    ' "' + Config.Param_UseConsoleLog + '": ' + useConLog + ',\n' +  // not quoted - boolean
    ' "' + Config.Param_HelpLogLevel + '": "' + helpLevel + '"\n' +
    '}\n';
    createDir(workDir);
    var confFile = workDir + '/test-config-native-type.json';
    fs.writeFileSync(confFile, confData);

    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile);

    verifyConf({
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : value2,
      [MyConfigItemWithDefaultKey3] : value3,
      [Config.Param_LogLevel] : level,
      [Config.Param_LogFile] : logFile,
      [Config.Param_LogFileMaxKB] : logMaxKB,
      [Config.Param_LogMaxFiles] : logMaxFiles,
      [Config.Param_UseSysLog] : useSysLog,
      [Config.Param_UseConsoleLog] : useConLog,
      [Config.Param_HelpLogLevel] : helpLevel
    });
    done();
  });

  it('should_use_default_for_config_file', function(done) {
    // only mandatory items
    var value1 = 'aaa';
    var confData = '{\n' +
    ' "' + MyConfigItemMandatoryKey1 + '": "' + value1 + '"\n' +
    '}\n';
    createDir(workDir);
    var confFile = workDir + '/test-config-uses-default.json';
    fs.writeFileSync(confFile, confData);

    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile);

    verifyConf({
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : undefined
    });
    done();
  });

  it('should read multiple config files', function(done) {
    const confFile1 = workDir + '/test-multiple-config1.json';
    const confFile2 = workDir + '/test-multiple-config2.json';
    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile1);
    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile2);

    // first config file
    const value1 = 'aaa';
    const confData1 = '{\n' +
    ' "' + MyConfigItemMandatoryKey1 + '": "' + value1 + '"\n' +
    '}\n';
    fs.writeFileSync(confFile1, confData1);

    // second config file
    const value2 = 123;
    const confData2 = '{\n' +
    ' "' + MyConfigItemOptionalKey2 + '": ' + value2 + '\n' +
    '}\n';
    fs.writeFileSync(confFile2, confData2);

    verifyConf({
      [Config.Param_Config] : [ confFile1, confFile2 ],
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : value2
    });
    done();
  });

  it('should not read if the same config file is given twices', function(done) {
    const confFile1 = workDir + '/test-same-config1.json';
    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile1);
    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile1);
    const value1 = 'aaa';
    process.argv.push('--' + MyConfigItemMandatoryKey1);
    process.argv.push(value1);

    // first config file
    const value3 = 123;
    const confData1 = '{\n' +
    ' "' + MyConfigItemWithDefaultKey3 + '": "' + value3 + '"\n' +
    '}\n';
    fs.writeFileSync(confFile1, confData1);

    verifyConf({
      [Config.Param_Config] : [ confFile1, confFile1 ],  // although the second is not read, config tells it was given
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : undefined,
      [MyConfigItemWithDefaultKey3] : 123  // this should be a single value
    });
    done();
  });

  it('should aggregate items in multiple config files', function(done) {
    const confFile1 = workDir + '/test-multiple-config1.json';
    const confFile2 = workDir + '/test-multiple-config2.json';
    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile1);
    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile2);

    // first config file
    const value1 = 'aaa';
    const value3a = 333;
    const confData1 = '{\n' +
    ' "' + MyConfigItemMandatoryKey1 + '": "' + value1 + '",\n' +
    ' "' + MyConfigItemWithDefaultKey3 + '": ' + value3a + '\n' +
    '}\n';
    fs.writeFileSync(confFile1, confData1);

    // second config file
    const value2 = 123;
    const value3b = 'ccc';
    const confData2 = '{\n' +
    ' "' + MyConfigItemOptionalKey2 + '": ' + value2 + ',\n' +
    ' "' + MyConfigItemWithDefaultKey3 + '": "' + value3b + '"\n' +
    '}\n';
    fs.writeFileSync(confFile2, confData2);

    verifyConf({
      [Config.Param_Config] : [ confFile1, confFile2 ],
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : value2,
      [MyConfigItemWithDefaultKey3] : [ value3a, value3b ]
    });
    done();
  });

  it('should read nested config files', function(done) {
    // main config file
    const nestedConfFile = workDir + '/test-nested-config-inner.json';
    const confData = '{\n' +
    ' "' + Config.Param_Config + '": "' + nestedConfFile + '"\n' +
    '}\n';
    createDir(workDir);
    const confFile = workDir + '/test-nested-config-outer.json';
    fs.writeFileSync(confFile, confData);

    // nested config file
    const value1 = 'aaa';
    const nestedConfData = '{\n' +
    ' "' + MyConfigItemMandatoryKey1 + '": "' + value1 + '"\n' +
    '}\n';
    fs.writeFileSync(nestedConfFile, nestedConfData);

    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile);

    verifyConf({
      [Config.Param_Config] : confFile,  // top level config only
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : undefined
    });
    done();
  });

  it('should read doubly nested config files', function(done) {
    // main config file
    const nestedConfFile1 = workDir + '/test-doubly-nested-config-inner1.json';
    const confData = '{\n' +
    ' "' + Config.Param_Config + '": "' + nestedConfFile1 + '"\n' +
    '}\n';
    createDir(workDir);
    const confFile = workDir + '/test-doubly-nested-config-outer.json';
    fs.writeFileSync(confFile, confData);

    // first nested config file
    const nestedConfFile2 = workDir + '/test-doubly-nested-config-inner2.json';
    const value1 = 'aaa';
    const nestedConfData = '{\n' +
    ' "' + MyConfigItemMandatoryKey1 + '": "' + value1 + '",\n' +
    ' "' + Config.Param_Config + '": "' + nestedConfFile2 + '"\n' +
    '}\n';
    fs.writeFileSync(nestedConfFile1, nestedConfData);

    // second nested config file
    const value2 = 123;
    const nestedConfData2 = '{\n' +
    ' "' + MyConfigItemOptionalKey2 + '": ' + value2 + '\n' +
    '}\n';
    fs.writeFileSync(nestedConfFile2, nestedConfData2);

    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile);

    verifyConf({
      [Config.Param_Config] : confFile,  // top level config only
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : value2
    });
    done();
  });

  it('should read multiple nested config files', function(done) {
    // main config file - note: multi value is given in an array
    const nestedConfFile1 = workDir + '/test-multiple-nested-config-inner1.json';
    const nestedConfFile2 = workDir + '/test-multiple-nested-config-inner2.json';
    const confData = '{\n' +
    ' "' + Config.Param_Config + '": [ "' + nestedConfFile1 + '",' +
                                      '"' + nestedConfFile2 + '" ]\n' +
    '}\n';
    createDir(workDir);
    const confFile = workDir + '/test-multiple-nested-config-outer.json';
    fs.writeFileSync(confFile, confData);

    // first config file
    const value1 = 'aaa';
    const nestedConfData = '{\n' +
    ' "' + MyConfigItemMandatoryKey1 + '": "' + value1 + '"\n' +
    '}\n';
    fs.writeFileSync(nestedConfFile1, nestedConfData);

    // second config file
    const value2 = 123;
    const nestedConfData2 = '{\n' +
    ' "' + MyConfigItemOptionalKey2 + '": ' + value2 + '\n' +
    '}\n';
    fs.writeFileSync(nestedConfFile2, nestedConfData2);

    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile);

    verifyConf({
      [Config.Param_Config] : confFile,  // top level config only
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : value2
    });
    done();
  });

  it('should aggregate items in multiple nested config files', function(done) {
    // main config file - note: multi value is given in an array
    const nestedConfFile1 = workDir + '/test-multiple-nested-config-inner1.json';
    const nestedConfFile2 = workDir + '/test-multiple-nested-config-inner2.json';
    const value3a = 'ppp';
    const confData = '{\n' +
    ' "' + MyConfigItemWithDefaultKey3 + '": "' + value3a + '",\n' +
    ' "' + Config.Param_Config + '": [ "' + nestedConfFile1 + '",' +
                                      '"' + nestedConfFile2 + '" ]\n' +
    '}\n';
    createDir(workDir);
    const confFile = workDir + '/test-multiple-nested-config-outer.json';
    fs.writeFileSync(confFile, confData);

    // first config file
    const value1 = 'aaa';
    const value3b = 333;
    const nestedConfData = '{\n' +
    ' "' + MyConfigItemMandatoryKey1 + '": "' + value1 + '",\n' +
    ' "' + MyConfigItemWithDefaultKey3 + '": ' + value3b + '\n' +
    '}\n';
    fs.writeFileSync(nestedConfFile1, nestedConfData);

    // second config file
    const value2 = 123;
    const value3c = 'bbb';
    const nestedConfData2 = '{\n' +
    ' "' + MyConfigItemWithDefaultKey3 + '": "' + value3c + '",\n' +
    ' "' + MyConfigItemOptionalKey2 + '": ' + value2 + '\n' +
    '}\n';
    fs.writeFileSync(nestedConfFile2, nestedConfData2);

    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile);

    verifyConf({
      [Config.Param_Config] : confFile,  // top level config only
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : value2,
      [MyConfigItemWithDefaultKey3] : [ value3a, value3b, value3c ]
    });
    done();
  });

  it('should not read looped nested config files', function(done) {
    createDir(workDir);
    const confFile = workDir + '/test-multiple-nested-config-outer.json';
    const nestedConfFile1 = workDir + '/test-duplicate-nested-config-inner1.json';
    const confData = '{\n' +
    ' "' + Config.Param_Config + '": "' + nestedConfFile1 + '"\n' +
    '}\n';
    fs.writeFileSync(confFile, confData);

    // nested config file
    const value1 = 'aaa';
    const nestedConfData = '{\n' +
    ' "' + MyConfigItemMandatoryKey1 + '": "' + value1 + '",\n' +
    ' "' + Config.Param_Config + '": "' + confFile + '"\n' +  // loops back to the main config file
    '}\n';
    fs.writeFileSync(nestedConfFile1, nestedConfData);

    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile);

    verifyConf({
      [Config.Param_Config] : confFile,  // top level config only
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : undefined
    });
    done();
  });

  it('should not aggregate items in duplicate nested config files', function(done) {
    // main config file - note: multi value is given in an array
    const nestedConfFile1 = workDir + '/test-multiple-nested-config-inner1.json';
    const value3a = 'ppp';
    const confData = '{\n' +
    ' "' + MyConfigItemWithDefaultKey3 + '": "' + value3a + '",\n' +
    ' "' + Config.Param_Config + '": [ "' + nestedConfFile1 + '",' +
                                      '"' + nestedConfFile1 + '" ]\n' +
    '}\n';
    createDir(workDir);
    const confFile = workDir + '/test-multiple-nested-config-outer.json';
    fs.writeFileSync(confFile, confData);

    // first config file
    const value3b = 333;
    const nestedConfData = '{\n' +
    ' "' + MyConfigItemWithDefaultKey3 + '": ' + value3b + '\n' +
    '}\n';
    fs.writeFileSync(nestedConfFile1, nestedConfData);

    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile);
    const value1 = 'aaa';
    process.argv.push('--' + MyConfigItemMandatoryKey1)
    process.argv.push(value1);

    verifyConf({
      [Config.Param_Config] : confFile,  // top level config only
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : undefined,
      [MyConfigItemWithDefaultKey3] : [ value3a, value3b ]  // 3a from main config and 3b from one of nested file
    });
    done();
  });

  it('should_allow_unused_items_in_config_file', function(done) {
    // only mandatory items
    var value1 = 'aaa';
    var confData = '{\n' +
    ' "' + MyConfigItemMandatoryKey1 + '": "' + value1 + '",\n' +
    ' "some-extra": "brah"\n' +
    '}\n';
    createDir(workDir);
    var confFile = workDir + '/test-config-unused-items.json';
    fs.writeFileSync(confFile, confData);

    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile);

    verifyConf({
      [Config.Param_Config] : confFile,
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : undefined
    });
    done();
  });

  it('should_use_command_line_if_both_are_given', function(done) {
    var value1 = '1111';
    process.argv.push('--' + MyConfigItemMandatoryKey1);
    process.argv.push(value1);
    var value2 = '2222';
    process.argv.push('--' + MyConfigItemOptionalKey2);
    process.argv.push(value2);
    var value3 = '3333';
    process.argv.push('--' + MyConfigItemWithDefaultKey3);
    process.argv.push(value3);

    // config file has different settings
    var confData = '{\n' +
    ' "' + MyConfigItemMandatoryKey1 + '": "9999",\n' +
    ' "' + MyConfigItemOptionalKey2 + '": 9999,\n' +
    ' "' + MyConfigItemWithDefaultKey3 + '": "some.json"\n' +
    '}\n';
    createDir(workDir);
    var confFile = workDir + '/test-config-uses-command-line.json';
    fs.writeFileSync(confFile, confData);

    process.argv.push('--' + Config.Param_Config);
    process.argv.push(confFile);

    verifyConf({
      [Config.Param_Config] : confFile,
      [MyConfigItemMandatoryKey1] : value1,
      [MyConfigItemOptionalKey2] : value2,
      [MyConfigItemWithDefaultKey3] : value3
    });
    done()
  });


  // fake subclass
  var MyConfig2DefaultLogFile = 'mylog2.txt';
  var MyConfig2ItemHelp = 'myhelp';
  var MyConfig2 = function() {
    Config.call(this, MyConfig2DefaultLogFile, [
      MyConfig2ItemHelp
    ]);
  }
  nodeutil.inherits(MyConfig2, Config);
  // override
  MyConfig2.prototype.initArgv = function(argvConfig, defaultConfig) {
    // set app specific config keys and description
    this.argvConfig[MyConfig2ItemHelp] = {
      describe: 'app specific help',
      alias: 'a'
    };
  }
  // override
  MyConfig2.prototype.processArgv = function() {
    if (this.get(MyConfig2ItemHelp)) {
      return false;
    }
    return true;
  }
  // override
  MyConfig2.prototype.validateConfigParam = function(key) {
    this.validateCalled = true;
  }

  it('should set shouldRun to false if app process returns false', function(done) {
    process.argv.push('--' + MyConfig2ItemHelp);

    var config = new MyConfig2();

    assert.equal(false, config.shouldRun);
    assert.ok(!config.validateCalled);

    done();
  });

  it('should_keep_shouldRun_stay_true_if_app_process_returns_true', function(done) {
  // not given
  //  process.argv.push('--' + MyConfig2.ItemHelp);

    var config = new MyConfig2();

    assert.equal(true, config.shouldRun);
    assert.ok(config.validateCalled);

    done();
  });
});
