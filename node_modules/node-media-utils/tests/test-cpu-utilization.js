/// @copyright Â© 2016 Airtime Media.  All rights reserved.

var chai = require('chai');
var expect = chai.expect;
var assert = chai.assert;
chai.config.includeStack = true;

var os = require('os');
var numCores = os.cpus().length;

var CpuUtil = require('../libs/cpu-utilization').CpuUtil;

describe('CpuUtil', function() {
  it('should measure cpu utilization', function(done) {
    var maxTestCount = 10;
    var testCount = 0;
    var minQueryIntervalMs = 50;  // shorten minimum query interval limit for testability
    var testee = new CpuUtil(minQueryIntervalMs);
    var lastOverall = null;
    var overallDiffers = false;

    var timer = setInterval(function() {
      var overall = testee.getOverall();
      var perCore = testee.getByCore();

      assert.ok(0.0 <= overall);
      assert.ok(overall <= 1.0);
      if (!lastOverall) {
        lastOverall = overall;
      } else {
        if (overall !== lastOverall) {
          overallDiffers = true;
        }
      }
      assert.equal(numCores, perCore.length);
      var sumCores = 0;
      for (var i = 0; i < perCore.length; ++i) {
        var util = perCore[i];
        sumCores += util;
        assert.ok(0.0 <= util);
        assert.ok(util <= 1.0);
      }
      var overallByCores = sumCores / perCore.length;
      assert.ok(overall - 0.01 <= overallByCores);  // with margin
      assert.ok(overallByCores <= overall + 0.01);

      ++testCount;
      if (maxTestCount == testCount) {
        assert.ok(overallDiffers);
        clearInterval(timer);
        done();
      }
    }, minQueryIntervalMs + 5);
  });

  var load = function() {
    var segDuration = 5;  // yields every 5 ms
    var timer = setInterval(function() {
      var start = Date.now();
      var f = 0.0;
      var s = 0.12;
      while (Date.now() < start + segDuration) {
        f += s;
        s = Math.sin(f);
      }
    }, segDuration);
    return timer;
  };

  it('should measure high cpu utilization core', function(done) {
    this.timeout(CpuUtil.MinIntervalMs * 2 + 100); // this test case takes long

    var maxTestCount = 10;
    var testCount = 0;
    var testee = new CpuUtil();

    var loadTimer;
    setTimeout(function() {
      clearInterval(loadTimer);

      var overall = testee.getOverall();
      expect(overall).to.within(0.01, 1.0);

      var perCore = testee.getByCore();
      expect(perCore.length).to.equal(os.cpus().length);
      var aboverOverall = false;
      for (var i = 0; i < perCore.length; ++i) {
        var cpu = perCore[i];
        if (overall <= cpu) aboverOverall = true;
      }
      // at least one core must score equal or higher than overall
      expect(aboverOverall).to.be.true;

      done();
    }, CpuUtil.MinIntervalMs * 2);

    // load while measuring
    loadTimer = load();
  });
});
