/// @copyright Â© 2015 Airtime Media.  All rights reserved.

var chai = require('chai');
var expect = chai.expect;
var assert = chai.assert;
chai.config.includeStack = true;

var util = require('../libs/util');

describe('util', function() {
  it('should_detect_isIpV4Addr', function(done) {
    assert.equal(null, util.isIpV4Addr(null));

    assert.equal(null, util.isIpV4Addr(''));

    assert.equal(null, util.isIpV4Addr({aa:11}));

    var good = '127.0.255.1';
    assert.equal(good, util.isIpV4Addr(good));

    assert.equal(null, util.isIpV4Addr('-1.2.3.4'));
    assert.equal(null, util.isIpV4Addr('1.-2.3.4'));
    assert.equal(null, util.isIpV4Addr('1.256.3.4'));
    assert.equal(null, util.isIpV4Addr('123:12A:345:4'));

    done();
  });

  it('should_dtect_isIpV6Addr', function(done) {
    assert.equal(null, util.isIpV6Addr(null));

    assert.equal(null, util.isIpV6Addr(''));

    assert.equal(null, util.isIpV6Addr({aa:11}));

    var good1 = '2001:3b::AF:93';
    assert.equal(good1, util.isIpV6Addr(good1));

    var good2 = '[2001:3b::AF:93]';
    assert.equal(good2, util.isIpV6Addr(good2));

    var good3 = '::3b';
    assert.equal(good3, util.isIpV6Addr(good3));

    var good4 = '2000::3b:4C';
    assert.equal(good4, util.isIpV6Addr(good4));

    assert.equal(null, util.isIpV6Addr('::4::5:6'));  // only one double collon allowed
    assert.equal(null, util.isIpV6Addr('1G:3:4:6'));  // not hex
    assert.equal(null, util.isIpV6Addr('2:-3:4:5:6'));  // can't be negative
    assert.equal(null, util.isIpV6Addr('1:2:3:4:5:6:7:8:9'));  // too many segments (max 8)

    done();
  });

  it('should hexDump empty buffer', function(done) {
    var b = Buffer.from([]);
    var out = util.hexDump(b);
    assert.equal(0, out.length);
    done();
  });

  it('should hexDump buffer smaller than 16 bytes', function(done) {
    var b = Buffer.from([0x10, 0x21, 0x32]);
    var out = util.hexDump(b);
    assert.equal(1, out.length);
    assert.equal('       0: 10 21 32                                         |.!2             ', out[0]);
    done();
  });

  it('should hexDump buffer bigger than 16 bytes', function(done) {
    var b = Buffer.from([
    0x09, 0x0A, 0x0D, 0x20, 0x41, 0x42, 0x43, 0x44, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0xFF,
    0x30]);
    var out = util.hexDump(b);
    assert.equal(2, out.length);
    assert.equal('       0: 09 0a 0d 20 41 42 43 44  70 71 72 73 74 75 76 ff |... ABCDpqrstuv.', out[0]);
    assert.equal('      10: 30                                               |0               ', out[1]);
    done();
  });

});

