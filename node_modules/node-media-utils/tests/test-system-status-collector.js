// @copyright Â© 2016 Airtime Media.  All rights reserved.

var SystemStatusCollector = require('../libs/system-status-collector').SystemStatusCollector;
var logging = require('../libs/logging').Logger;

module.exports.setUp = function(callback) {
  // suppress console log
  logging.initConsoleLogger({level: 'none'});
  callback();
}

module.exports.tearDown = function(callback) {
  logging.initConsoleLogger({level: 'none'});
  callback();
}

module.exports.test_throw_if_window_sizes_are_not_given = function(test) {
  try {
    new SystemStatusCollector();
    test.ok(false, 'should throw');
  } catch(ex) {
    test.ok(0 < ex.toString().indexOf('cpuAvgWindowSecs'));
    test.done();
  }
}

module.exports.test_throw_if_NaN_window_size_was_given = function(test) {
  try {
    new SystemStatusCollector('abc');
    test.ok(false, 'should throw');
  } catch(ex) {
    test.ok(0 < ex.toString().indexOf('cpuAvgWindowSecs'));
    test.done();
  }
}

module.exports.test_sunny_day = function(test) {
  // the testee
  var cpuAvgSecs = [ 0.1, 0.5 ];
  var testee = new SystemStatusCollector(cpuAvgSecs);

  // exercise
  setTimeout(function() {
    testee.collect(function(err, result) {
      test.ok(!err);

      test.ok(0 < result.numCpus);
      test.ok(0 <= result.cpuUtilization);
      test.ok(result.cpuUtilization <= 1.0);
      test.equal(2, Object.keys(result.cpuUtilAvg).length);
      test.equal('sec0.1', Object.keys(result.cpuUtilAvg)[0]);
      test.ok(0 <= result.cpuUtilAvg['sec0.1']);
      test.ok(result.cpuUtilAvg['sec0.1'] <= 1.0);
      test.equal('sec0.5', Object.keys(result.cpuUtilAvg)[1]);
      test.ok(0 <= result.cpuUtilAvg['sec0.5']);
      test.ok(result.cpuUtilAvg['sec0.5'] <= 1.0);
      test.ok(0 < result.memFree);
      test.ok(0 < result.memTotal)
      test.ok(0 <= result.cpuLoadAvg.min1);
      test.ok(0 <= result.cpuLoadAvg.min5);
      test.ok(0 <= result.cpuLoadAvg.min15);

      // nodeunit needs this explicit stop (of intervalTimer) to finish
      testee.cpuUtilAvg_.stop();

      test.done();
    });
  }, 600);
}
