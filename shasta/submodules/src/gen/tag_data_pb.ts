//  Copyright Â© 2023 Aircore.  All rights reserved.

// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file tag_data.proto (package TagDataProto, syntax proto2)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto2 } from "@bufbuild/protobuf";

/**
 * @generated from message TagDataProto.TagDataObjectIdentifier
 */
export class TagDataObjectIdentifier extends Message<TagDataObjectIdentifier> {
  /**
   * the ID of the application
   *
   * @generated from field: optional string app_id = 1;
   */
  appId?: string;

  /**
   * the channel ID (room ID in Cantina)
   *
   * @generated from field: optional string tag = 2;
   */
  tag?: string;

  /**
   * must be "system" or "application"
   *
   * @generated from field: optional string scope = 3;
   */
  scope?: string;

  /**
   * unique identifier for a tag data object within an application, tag, and scope. e.g., "recording/71111-050"
   *
   * @generated from field: optional string name = 4;
   */
  name?: string;

  constructor(data?: PartialMessage<TagDataObjectIdentifier>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "TagDataProto.TagDataObjectIdentifier";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "app_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "tag", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagDataObjectIdentifier {
    return new TagDataObjectIdentifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagDataObjectIdentifier {
    return new TagDataObjectIdentifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagDataObjectIdentifier {
    return new TagDataObjectIdentifier().fromJsonString(jsonString, options);
  }

  static equals(a: TagDataObjectIdentifier | PlainMessage<TagDataObjectIdentifier> | undefined, b: TagDataObjectIdentifier | PlainMessage<TagDataObjectIdentifier> | undefined): boolean {
    return proto2.util.equals(TagDataObjectIdentifier, a, b);
  }
}

/**
 * @generated from message TagDataProto.TagData
 */
export class TagData extends Message<TagData> {
  /**
   * @generated from field: optional TagDataProto.TagDataObjectIdentifier identifier = 1;
   */
  identifier?: TagDataObjectIdentifier;

  /**
   * indicates that the object has been deleted
   *
   * @generated from field: optional bool deleted = 2;
   */
  deleted?: boolean;

  /**
   * lifetime in seconds; informational to clients
   *
   * @generated from field: optional uint32 lifetime = 3;
   */
  lifetime?: number;

  /**
   * tag data
   *
   * @generated from field: optional string data = 4;
   */
  data?: string;

  constructor(data?: PartialMessage<TagData>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "TagDataProto.TagData";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "message", T: TagDataObjectIdentifier, opt: true },
    { no: 2, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "lifetime", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagData {
    return new TagData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagData {
    return new TagData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagData {
    return new TagData().fromJsonString(jsonString, options);
  }

  static equals(a: TagData | PlainMessage<TagData> | undefined, b: TagData | PlainMessage<TagData> | undefined): boolean {
    return proto2.util.equals(TagData, a, b);
  }
}

/**
 * internal message used to wrap a TagData object with a sequence number
 *
 * @generated from message TagDataProto.TagDataEnvelope
 */
export class TagDataEnvelope extends Message<TagDataEnvelope> {
  /**
   * @generated from field: optional TagDataProto.TagData tag_data = 1;
   */
  tagData?: TagData;

  /**
   * sequence number of the tag data object
   *
   * @generated from field: optional string sequence_number = 2;
   */
  sequenceNumber?: string;

  constructor(data?: PartialMessage<TagDataEnvelope>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "TagDataProto.TagDataEnvelope";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "tag_data", kind: "message", T: TagData, opt: true },
    { no: 2, name: "sequence_number", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagDataEnvelope {
    return new TagDataEnvelope().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagDataEnvelope {
    return new TagDataEnvelope().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagDataEnvelope {
    return new TagDataEnvelope().fromJsonString(jsonString, options);
  }

  static equals(a: TagDataEnvelope | PlainMessage<TagDataEnvelope> | undefined, b: TagDataEnvelope | PlainMessage<TagDataEnvelope> | undefined): boolean {
    return proto2.util.equals(TagDataEnvelope, a, b);
  }
}

/**
 * internal message used to wrap a map of TagDataEnvelope objects with a sequence number
 *
 * @generated from message TagDataProto.TagDataSnapshot
 */
export class TagDataSnapshot extends Message<TagDataSnapshot> {
  /**
   * map of tag data objects, keyed by name
   *
   * @generated from field: map<string, TagDataProto.TagDataEnvelope> snapshot = 1;
   */
  snapshot: { [key: string]: TagDataEnvelope } = {};

  /**
   * sequence number of the snapshot
   *
   * @generated from field: optional string sequence_number = 2;
   */
  sequenceNumber?: string;

  constructor(data?: PartialMessage<TagDataSnapshot>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "TagDataProto.TagDataSnapshot";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "snapshot", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TagDataEnvelope} },
    { no: 2, name: "sequence_number", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagDataSnapshot {
    return new TagDataSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagDataSnapshot {
    return new TagDataSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagDataSnapshot {
    return new TagDataSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: TagDataSnapshot | PlainMessage<TagDataSnapshot> | undefined, b: TagDataSnapshot | PlainMessage<TagDataSnapshot> | undefined): boolean {
    return proto2.util.equals(TagDataSnapshot, a, b);
  }
}

