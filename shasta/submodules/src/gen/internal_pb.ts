//  Copyright Â© 2023 Aircore.  All rights reserved.

// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file internal.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message TagDataEnvelope
 */
export class TagDataEnvelope extends Message<TagDataEnvelope> {
  /**
   * name of the tag
   *
   * @generated from field: string tag_name = 1;
   */
  tagName = "";

  /**
   * sequence number of the tag
   *
   * @generated from field: string sequence_number = 2;
   */
  sequenceNumber = "";

  /**
   * data of the tag
   *
   * @generated from field: google.protobuf.Any data = 3;
   */
  data?: Any;

  constructor(data?: PartialMessage<TagDataEnvelope>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "TagDataEnvelope";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sequence_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagDataEnvelope {
    return new TagDataEnvelope().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagDataEnvelope {
    return new TagDataEnvelope().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagDataEnvelope {
    return new TagDataEnvelope().fromJsonString(jsonString, options);
  }

  static equals(a: TagDataEnvelope | PlainMessage<TagDataEnvelope> | undefined, b: TagDataEnvelope | PlainMessage<TagDataEnvelope> | undefined): boolean {
    return proto3.util.equals(TagDataEnvelope, a, b);
  }
}

/**
 * @generated from message TagDataSnapshot
 */
export class TagDataSnapshot extends Message<TagDataSnapshot> {
  /**
   * map of tag data objects, keyed by name
   *
   * @generated from field: map<string, TagDataEnvelope> snapshot = 1;
   */
  snapshot: { [key: string]: TagDataEnvelope } = {};

  /**
   * sequence number of the snapshot
   *
   * @generated from field: optional string sequence_number = 2;
   */
  sequenceNumber?: string;

  constructor(data?: PartialMessage<TagDataSnapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "TagDataSnapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "snapshot", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TagDataEnvelope} },
    { no: 2, name: "sequence_number", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagDataSnapshot {
    return new TagDataSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagDataSnapshot {
    return new TagDataSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagDataSnapshot {
    return new TagDataSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: TagDataSnapshot | PlainMessage<TagDataSnapshot> | undefined, b: TagDataSnapshot | PlainMessage<TagDataSnapshot> | undefined): boolean {
    return proto3.util.equals(TagDataSnapshot, a, b);
  }
}

